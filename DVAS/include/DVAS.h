#include "../../common/include/Tools.h"


/**
 * @struct Omega
 * @brief Stores the sets for sanitization control.
 *
 * Contains:
 * - ADM: The indices of messages that need sanitization (admissible).
 * - FIX: The indices of messages that should bypass sanitization (fixed).
 */
typedef struct {
    vector<int> ADM;
    vector<int> FIX;
}Omega;

/**
 * @struct KeyPair_DVAS
 * @brief Represents a DVAS key pair.
 *
 * Contains:
 * - sk: The secret key (mpz_class).
 * - PK: The public key (ECP2).
 */
typedef struct {
    mpz_class sk;
    ECP2 PK;
}KeyPair_DVAS;

/**
 * @struct KeyPairDN_DVAS
 * @brief Key pair used by the DV in DVAS.
 *
 * Contains:
 * - sk: The secret key.
 * - PK: The public key.
 */
typedef struct {
    mpz_class sk;
    ECP PK;
}KeyPairDN_DVAS;

/**
 * @struct SN_DVAS
 * @brief Represents a Sensor Node in DVAS.
 *
 * Contains:
 * - IDi: The identity of the sensor.
 * - Ri: commitment generated by MC.
 * - keyPair: The key pair used by the sensor.
 */
typedef struct {
    mpz_class IDi;
    ECP2 Ri;
    KeyPair_DVAS keyPair;
}SN_DVAS;

/**
 * @struct Params_DVAS
 * @brief System public parameters used in the DVAS scheme.
 *
 * Contains:
 * - P: Generator in group G1.
 * - U: A list of generators in group G2, representing public keys of sensor nodes (SNs).
 * - X: Public key of the Edge Node (EN), in G2.
 * - Y: Public key of the Designated Verifier (DV), in G1.
 */
typedef struct {
    ECP P;
    vector<ECP2> U;
    ECP2 X;
    ECP Y;
}Params_DVAS;

/**
 * @struct Sigma_i_DVAS
 * @brief Represents an individual signature element in DVAS.
 *
 * Contains:
 * - Ti: The signature component in G1.
 * - Vi: The signature component in G2.
 * - fai_i: Auxiliary value for verification.
 */
typedef struct {
    ECP Ti;
    ECP2 Vi;
    ECP fai_i;
}Sigma_i_DVAS;

/**
 * @brief Initializes the Omega structure with specified sizes for ADM and FIX sets.
 *
 * This function sets up the sanitization policy by specifying:
 * - ADM (Admissible set): indices of messages that can be sanitized.
 * - FIX (Fixed set): indices of messages that must remain unsanitized.
 *
 * @param omega The Omega structure to initialize.
 * @param ADM_size The number of message indices allowed for sanitization.
 * @param FIX_size The number of message indices that should remain fixed.
 */
void initOmega(Omega &omega, int ADM_size, int FIX_size);

/**
 * @brief Applies a modular transformation to the input message.
 *
 * This function defines the sanitization rule. For example, it may modify
 * the message by adding a fixed value or applying a custom transformation.
 * The implementation can be customized based on the system's needs.
 *
 * @param m The original message.
 * @return The transformed (sanitized) message.
 */
mpz_class f_mod(mpz_class m);

/**
 * @brief Hash function used in DVAS to generate scalar values for signature generation.
 * @param mi The message to hash.
 * @param omega The Omega structure.
 * @param fp12 A pairing result used as part of the hash input.
 * @return The resulting scalar hash value.
 */
mpz_class h_DVAS(mpz_class mi, Omega omega, FP12 fp12);

/**
 * @brief Hash function for identity-based component generation.
 * @param IDi The identity of the sensor.
 * @param Ri A randomness element from the sensor.
 * @return A hash value derived from IDi and Ri.
 */
mpz_class h_p_DVAS(mpz_class IDi, ECP2 Ri);

/**
 * @brief Hash function H0 used in DVAS signature construction.
 * @param mi The message.
 * @param Vi Blinding component.
 * @param fai Auxiliary value.
 * @return Resulting point in G1.
 */
ECP H0_DVAS(mpz_class mi, ECP2 Vi, ECP fai);

/**
 * @brief Hash function H1 used in DVAS signature construction.
 * @param mi The message.
 * @param Vi Blinding component.
 * @param fai Auxiliary value.
 * @return Resulting point in G1.
 */
ECP H1_DVAS(mpz_class mi, ECP2 Vi, ECP fai);

/**
 * @brief Sets up system-wide parameters for DVAS.
 * @param MC Management Center's key pair (input/output).
 * @param EN ) Edge Node's key pair (input/output).
 * @param DN Designated Verifier's key pair (input/output).
 * @param SN List of sensor nodes.
 * @param n Number of sensors.
 * @return Initialized Params_DVAS structure.
 */
Params_DVAS SetUp_DVAS(KeyPair_DVAS &MC, KeyPair_DVAS &EN, KeyPairDN_DVAS &DN, vector<SN_DVAS> &SN, int n);

/**
 * @brief Sensor node joins the DVAS system and initializes its associated omega.
 *
 * This function allows a sensor node to join the DVAS system. During the joining process,
 * a unique omega configuration is assigned to the sensor, which defines its sanitization policy.
 *
 * @param SNi The sensor node that is joining the system.
 * @param S The challenge or contextual element used during the joining phase.
 * @param omega The sanitization policy (ADM and FIX sets) to be initialized for this sensor.
 */
void Joining_DVAS(SN_DVAS SNi, ECP2 S, Omega &omega);

/**
 * @brief Generates DVAS signatures over a vector of messages by a sensor.
 * @param SN The sensor node signing.
 * @param pp The system parameters.
 * @param m The vector of messages to sign.
 * @param omega The global ADM/FIX configuration.
 * @return A vector of signature structures.
 */
vector<Sigma_i_DVAS> Signing_DVAS(SN_DVAS SN, Params_DVAS pp, vector<mpz_class> m, Omega omega);

/**
 * @brief Sanitizes a set of DVAS signatures based on ADM/FIX configuration.
 * @param m The vector of original messages.
 * @param sigma_vec The original signatures.
 * @param pp The system parameters.
 * @param SNi The sensor node.
 * @param EN The Edge Nodeâ€™s key pair.
 * @param omega The sanitization configuration.
 * @return A vector of sanitized signatures.
 */
vector<Sigma_i_DVAS> Sanitizing_DVAS(vector<mpz_class> m,vector<Sigma_i_DVAS> sigma_vec,Params_DVAS pp,SN_DVAS SNi,KeyPair_DVAS EN,Omega omega);

/**
 * @brief Verifies a batch of DVAS signatures.
 * @param m The vector of messages.
 * @param sigma_vec The corresponding signatures.
 * @param SN The signer sensor node.
 * @param pp The system parameters.
 * @return True if all signatures are valid; false otherwise.
 */
bool Verify_DVAS(vector<mpz_class> m,vector<Sigma_i_DVAS> sigma_vec,SN_DVAS SN,Params_DVAS pp);

/**
 * @brief Detects whether a given signature is original or has been sanitized.
 *
 * This function verifies the origin of a message/signature pair and determines
 * whether the signature is an original or sanitized version. The detection
 * logic can vary based on the `flag` parameter, which distinguishes between
 * different detection modes (e.g., for ADM or FIX validation).
 *
 * @param mi The message under inspection.
 * @param sigma The full vector of signatures.
 * @param SN The signer sensor node.
 * @param omega The sanitization policy (including ADM and FIX sets).
 * @param pp The public system parameters.
 * @param flag Control parameter that specifies the detection scenario.
 */
void Detect_DVAS(mpz_class mi, vector<Sigma_i_DVAS> sigma, SN_DVAS SN, Omega omega, Params_DVAS pp, int flag);