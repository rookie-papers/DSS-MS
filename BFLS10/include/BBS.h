#include "../../common/include/Tools.h"


/**
 * @struct Gsk_sig
 * @brief Structure for a group member's secret key.
 *
 * Contains the private key value `x` and the identity commitment point `A`.
 */
typedef struct {
    mpz_class x;  ///< Group member's private key
    ECP A;        ///< Commitment to the member's identity (As described as cert_san in BFLS10)
} GSK_sig;

/**
 * @struct Gmsk
 * @brief Structure for the group manager's secret key (GMSK).
 *
 * Includes secret values used for opening signatures.
 */
typedef struct {
    mpz_class ksi_1;
    mpz_class ksi_2;
} GMSK;

/**
 * @struct Gpk
 * @brief Structure for the group public key (GPK).
 *
 * Contains multiple elliptic curve elements and bilinear pairing elements.
 */
typedef struct {
    ECP g_1;
    ECP2 g_2;
    ECP h;
    ECP u;
    ECP v;
    ECP2 w;
} GPK;

/**
 * @struct BBS_sig
 * @brief Structure for a BBS group signature.
 *
 * Consists of signature commitments, challenge, and response values.
 */
typedef struct {
    mpz_class x;
    ECP T_1;
    ECP T_2;
    ECP T_3;
    mpz_class c;
    mpz_class s_alpha;
    mpz_class s_beta;
    mpz_class s_x;
    mpz_class s_delta1;
    mpz_class s_delta2;
} Sigma_BBS;

/**
 * @brief Generates a group member's secret key.
 *
 * @param gamma Member's secret seed value.
 * @return Gsk_sig The generated group member's secret key.
 */
GSK_sig UKGen(mpz_class gamma);

/**
 * @brief Generates group keys (GPK and GMSK).
 *
 * Used by the group manager to set up the system keys.
 *
 * @param[out] gmsk Generated group manager's secret key.
 * @param[out] gpk Generated group public key.
 * @param gpk_sig A signature proving the public key’s validity.
 * @param pk_san Public key of the signer.
 * @param gamma Secret seed value.
 */
void GKGen(GMSK &gmsk, GPK &gpk, vector<ECP> PKs, mpz_class gamma);

/**
 * @brief Hash function used in the Fiat-Shamir heuristic.
 *
 * Hashes the message and various signature components into a challenge.
 *
 * @param M The message to be signed.
 * @param T1, T2, T3 Signature elements.
 * @param R1, R2, R3, R4, R5 Commitment elements.
 * @return mpz_class The resulting challenge value.
 */
mpz_class H(mpz_class M, ECP T1, ECP T2, ECP T3, ECP R1, ECP R2, FP12 R3, ECP R4, ECP R5);

/**
 * @brief Generates a BBS group signature.
 *
 * @param gskSig Group member’s secret key.
 * @param M The message to sign.
 * @param gpk Group public key.
 * @return Sigma_BBS The generated signature.
 */
Sigma_BBS GSig(GSK_sig gskSig, mpz_class M,GPK gpk);

/**
 * @brief Verifies a BBS group signature.
 *
 * @param gpk Group public key.
 * @param M The signed message.
 * @param sig The signature to verify.
 * @return true If the signature is valid.
 * @return false If the signature is invalid.
 */
bool GVf(GPK gpk, mpz_class M, Sigma_BBS sig);

/**
 * @brief Opens a group signature to reveal the signer’s identity.
 *
 * Only the group manager with the secret key can perform this.
 *
 * @param gpk Group public key.
 * @param gmsk Group manager's secret key.
 * @param sig The group signature.
 * @return ECP The identity commitment point `A` of the signer.
 */
ECP Open(GPK gpk, GMSK gmsk, Sigma_BBS sig);

/**
 * @brief Judge function to identify the signer from their identity commitment.
 *
 * @param A The identity commitment point.
 * @return int Returns the group member index who generated the signature.
 *             Returns 0 if the signature was not generated by a valid group member.
 */
int GJudge(ECP A);

